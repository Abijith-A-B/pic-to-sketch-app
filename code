import tkinter as tk
from tkinter import filedialog, ttk
import cv2
import os
from PIL import Image, ImageTk
import numpy as np
import serial
import time

class DeltaAutomations:
    def __init__(self, root):
        self.root = root
        self.root.title("Delta Automations")
        self.root.geometry("800x600")
        self.root.configure(bg='#000000')

        # Initialize variables
        self.current_image = None
        self.sketch_image = None
        self.lower_threshold = 70
        self.upper_threshold = 135
        self.gcode_commands = []
        
        # GRBL settings
        self.feed_rate = 1000  # Default feed rate
        self.plunge_rate = 500  # Default plunge rate
        self.cutting_depth = -1.0  # Default cutting depth
        
        self.setup_gui()

    def setup_gui(self):
        # Previous GUI setup code remains the same until the download button
        try:
            logo_path = r"C:\Users\Abijith\Desktop\delta.jpg"
            logo_img = Image.open(logo_path)
            logo_img = logo_img.resize((200, 100), Image.LANCZOS)
            self.logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(self.root, image=self.logo_photo, bg='#000000')
            logo_label.pack(pady=10)

            credit_label = tk.Label(
                self.root,
                text="Developer: Abijith A B",
                fg='#FFA500',
                bg='#000000',
                font=('Arial', 10)
            )
            credit_label.pack()
        except Exception as e:
            print(f"Error loading logo: {e}")

        main_frame = tk.Frame(self.root, bg='#000000')
        main_frame.pack(expand=True, fill='both', padx=20, pady=20)

        upload_btn = tk.Button(
            main_frame,
            text="Upload Image",
            command=self.upload_image,
            bg='#FFA500',
            fg='#000000',
            font=('Arial', 12, 'bold'),
            width=15
        )
        upload_btn.pack(pady=10)

        # GRBL Settings Frame
        grbl_frame = tk.Frame(main_frame, bg='#000000')
        grbl_frame.pack(pady=10)

        # Feed Rate Control
        tk.Label(
            grbl_frame,
            text="Feed Rate (mm/min):",
            fg='#FFA500',
            bg='#000000'
        ).pack(side=tk.LEFT, padx=5)
        
        self.feed_rate_entry = tk.Entry(grbl_frame, width=8)
        self.feed_rate_entry.insert(0, str(self.feed_rate))
        self.feed_rate_entry.pack(side=tk.LEFT, padx=5)

        # Cutting Depth Control
        tk.Label(
            grbl_frame,
            text="Cutting Depth (mm):",
            fg='#FFA500',
            bg='#000000'
        ).pack(side=tk.LEFT, padx=5)
        
        self.cutting_depth_entry = tk.Entry(grbl_frame, width=8)
        self.cutting_depth_entry.insert(0, str(self.cutting_depth))
        self.cutting_depth_entry.pack(side=tk.LEFT, padx=5)

        # Threshold controls
        controls_frame = tk.Frame(main_frame, bg='#000000')
        controls_frame.pack(pady=10)

        tk.Label(
            controls_frame,
            text="Lower Threshold:",
            fg='#FFA500',
            bg='#000000'
        ).pack(side=tk.LEFT, padx=5)
        
        self.lower_scale = ttk.Scale(
            controls_frame,
            from_=0,
            to=255,
            orient='horizontal',
            value=self.lower_threshold,
            command=self.update_sketch
        )
        self.lower_scale.pack(side=tk.LEFT, padx=5)

        tk.Label(
            controls_frame,
            text="Upper Threshold:",
            fg='#FFA500',
            bg='#000000'
        ).pack(side=tk.LEFT, padx=5)
        
        self.upper_scale = ttk.Scale(
            controls_frame,
            from_=0,
            to=255,
            orient='horizontal',
            value=self.upper_threshold,
            command=self.update_sketch
        )
        self.upper_scale.pack(side=tk.LEFT, padx=5)

        # Image display areas
        self.display_frame = tk.Frame(main_frame, bg='#000000')
        self.display_frame.pack(expand=True, fill='both')

        self.original_label = tk.Label(self.display_frame, bg='#000000')
        self.original_label.pack(side=tk.LEFT, padx=10)

        self.sketch_label = tk.Label(self.display_frame, bg='#000000')
        self.sketch_label.pack(side=tk.LEFT, padx=10)

        # Buttons frame
        buttons_frame = tk.Frame(main_frame, bg='#000000')
        buttons_frame.pack(pady=10)

        # Download Sketch button
        self.download_btn = tk.Button(
            buttons_frame,
            text="Download Sketch",
            command=self.download_sketch,
            bg='#FFA500',
            fg='#000000',
            font=('Arial', 12, 'bold'),
            width=15,
            state=tk.DISABLED
        )
        self.download_btn.pack(side=tk.LEFT, padx=5)

        # Generate G-code button
        self.gcode_btn = tk.Button(
            buttons_frame,
            text="Generate G-code",
            command=self.generate_gcode,
            bg='#FFA500',
            fg='#000000',
            font=('Arial', 12, 'bold'),
            width=15,
            state=tk.DISABLED
        )
        self.gcode_btn.pack(side=tk.LEFT, padx=5)

        # Download G-code button
        self.download_gcode_btn = tk.Button(
            buttons_frame,
            text="Download G-code",
            command=self.download_gcode,
            bg='#FFA500',
            fg='#000000',
            font=('Arial', 12, 'bold'),
            width=15,
            state=tk.DISABLED
        )
        self.download_gcode_btn.pack(side=tk.LEFT, padx=5)

    def generate_gcode(self):
        if self.sketch_image is None:
            return

        # Reset G-code commands
        self.gcode_commands = []
        
        # Initial G-code setup
        self.gcode_commands.extend([
            'G21 ; Set units to millimeters',
            'G90 ; Set absolute positioning',
            'G28 ; Home all axes',
            'M3 S1000 ; Start spindle',
            f'F{self.feed_rate} ; Set feed rate'
        ])

        # Convert sketch to contours
        contours, _ = cv2.findContours(
            cv2.bitwise_not(self.sketch_image),
            cv2.RETR_EXTERNAL,
            cv2.CHAIN_APPROX_SIMPLE
        )

        # Process each contour
        for contour in contours:
            # Move to safe height
            self.gcode_commands.append('G0 Z5')
            
            # Start from the first point
            start_point = contour[0][0]
            self.gcode_commands.append(f'G0 X{start_point[0]:.3f} Y{start_point[1]:.3f}')
            
            # Plunge to cutting depth
            self.gcode_commands.append(f'G1 Z{self.cutting_depth} F{self.plunge_rate}')
            
            # Process remaining points
            for point in contour[1:]:
                x, y = point[0]
                self.gcode_commands.append(f'G1 X{x:.3f} Y{y:.3f}')

        # End G-code
        self.gcode_commands.extend([
            'G0 Z5 ; Lift tool',
            'G28 ; Return to home',
            'M5 ; Stop spindle',
            'M30 ; End program'
        ])

        # Enable download button
        self.download_gcode_btn.config(state=tk.NORMAL)

    def download_gcode(self):
        if not self.gcode_commands:
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".gcode",
            filetypes=[("G-code files", "*.gcode"), ("All files", "*.*")]
        )
        
        if file_path:
            with open(file_path, 'w') as f:
                f.write('\n'.join(self.gcode_commands))

    def upload_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.gif *.tiff")]
        )
        if file_path:
            self.current_image = cv2.imread(file_path)
            if self.current_image is not None:
                self.display_images()
                self.download_btn.config(state=tk.NORMAL)
                self.gcode_btn.config(state=tk.NORMAL)

    # Previous methods remain the same
    def update_sketch(self, _=None):
        if self.current_image is not None:
            self.display_images()

    def create_sketch(self, image):
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(src=gray, ksize=(3, 5), sigmaX=0.5)
        edges = cv2.Canny(
            blurred,
            int(self.lower_scale.get()),
            int(self.upper_scale.get())
        )
        self.sketch_image = cv2.bitwise_not(edges)
        return self.sketch_image

    def display_images(self):
        # Display original image
        img_display = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2RGB)
        img_display = Image.fromarray(img_display)
        img_display = img_display.resize((300, 300), Image.LANCZOS)
        img_photo = ImageTk.PhotoImage(img_display)
        self.original_label.configure(image=img_photo)
        self.original_label.image = img_photo

        # Display sketch
        sketch = self.create_sketch(self.current_image)
        sketch_display = Image.fromarray(sketch)
        sketch_display = sketch_display.resize((300, 300), Image.LANCZOS)
        sketch_photo = ImageTk.PhotoImage(sketch_display)
        self.sketch_label.configure(image=sketch_photo)
        self.sketch_label.image = sketch_photo

    def download_sketch(self):
        if self.sketch_image is not None:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[("PNG files", "*.png"), ("All files", "*.*")]
            )
            if file_path:
                cv2.imwrite(file_path, self.sketch_image)

def main():
    root = tk.Tk()
    app = DeltaAutomations(root)
    root.mainloop()

if __name__ == "__main__":
    main()
